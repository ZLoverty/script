import os
import numpy as np
from skimage import io
from shutil import copyfile
import sys

"""
GENERAL INFORMATION
===================

This program extracts light-weight information from data generated by **bacteria.vi** at Clement lab, PMMH, ESPCI.

Videos will be recognized in pairs: *anchor* and *record*.
Original video folders are named as "yyyy-mm-dd_hhhmmmsss".
Anchor video folders will be renamed by adding "_ref_n" at the end of the original name,
and the corresponding record video will be renamed by adding "_n" at the end of the original name.
So after a day of experiment, we will have a main folder containing subfolders, with the following structure:
```
|- main folder
    |- 2021-07-21_16h02m43s_ref_1
    |- 2021-07-21_16h02m43s_1
    |- 2021-07-21_16h03m43s_ref_2
    |- 2021-07-21_16h03m43s_2
    |- 2021-07-21_16h04m43s_ref_3
    |- 2021-07-21_16h04m43s_3
    |- ...
```
This code will extract the 1st image "ref.tif" from an anchor video, for example in "2021-07-21_16h02m43s_ref_1".
Text files "Track.txt", "StagePosition.txt" and "RawImageInfo.txt" in the corresponding record video folder will be extracted, too.
These 4 files will be saved under folder "main folder/extract/n".
The resulting folder structure will be the following:
```
|- main folder
    |- 2021-07-21_16h02m43s_ref_1
    |- 2021-07-21_16h02m43s_1
    |- 2021-07-21_16h03m43s_ref_2
    |- 2021-07-21_16h03m43s_2
    |- 2021-07-21_16h04m43s_ref_3
    |- 2021-07-21_16h04m43s_3
    |- ...
    |- extract
        |- 1
            |- ref.tif
            |- Track.txt
            |- StagePosition.txt
            |- RawImageInfo.txt
        |- 2
        |- 3
        |- ...
```
USAGE
=====

1. In command line, enter the directory of **extract.py**
2. Run `python extract.py main_folder`, here the main_folder is the folder containing video subfolders.

EDIT
====
10062021 -- Initial commit.
10072021 -- Add date stamp to the extracted folders.
            Number format changes to %04d. "{:04d}_yyyy-mm-dd"
            Change the condition to ignore folder. Now ignore everything that has less than 2 "_"'s.
"""

def check_necessary_files(folder):
    """ Check for necessary files
    Check for RawImage.raw, RawImageInfo.txt (height, width, fps ...)

    Test:
    info_file = os.path.join(folder, 'RawImageInfo.txt')
    read_raw_image_info(info_file)
    """
    return os.path.exists(os.path.join(folder, 'RawImage.raw')) and \
            os.path.exists(os.path.join(folder, 'RawImageInfo.txt'))

def read_raw_image_info(info_file):
    """
    Read image info, such as fps and image dimensions, from RawImageInfo.txt
    """
    with open(info_file, 'r') as f:
        a = f.read()
    fps, h, w = a.split('\n')[0:3]
    return int(fps), int(h), int(w)

# folder = '/home/zhengyang/data/test_extractor'
folder = sys.argv[1]

sfL = next(os.walk(folder))[1]
for sf in sfL:
    if len(sf.split('_')) < 3:
        continue
    print('processing {}'.format(sf))
    date = sf.split('_')[0]
    n = sf.split('_')[-1]
    extract_folder = os.path.join(folder, 'extract', '{0:04d}_{1}'.format(int(n), date))
    img_folder = os.path.join(folder, sf)

    if 'ref' in sf.split('_'):
        # this is a reference image folder, only copy the 1st frame of .raw to extract_folder
        if os.path.exists(extract_folder) == False:
            os.makedirs(extract_folder)
        if check_necessary_files(img_folder):
            info_file = os.path.join(img_folder, 'RawImageInfo.txt')
            raw_file = os.path.join(img_folder, 'RawImage.raw')
            fps, h, w = read_raw_image_info(info_file)
            images = np.fromfile(raw_file, dtype='uint16')
            first_image = images[2:2+h*w].reshape(h, w)
            io.imsave(os.path.join(extract_folder, 'ref.tif'), first_image)
    elif len(sf.split('_')) == 3:
        if os.path.exists(extract_folder) == False:
            os.makedirs(extract_folder)
        info_file = os.path.join(img_folder, 'RawImageInfo.txt')
        SP_file = os.path.join(img_folder, 'StagePosition.txt')
        track_file = os.path.join(img_folder, 'Track', 'Track.txt')
        if os.path.exists(info_file) == True:
            copyfile(info_file, os.path.join(extract_folder, 'RawImageInfo.txt'))
        else:
            print("RawImageInfo.txt does not exist")

        if os.path.exists(SP_file) == True:
            copyfile(SP_file, os.path.join(extract_folder, 'StagePosition.txt'))
        else:
            print("StagePosition.txt does not exist")

        if os.path.exists(track_file) == True:
            copyfile(track_file, os.path.join(extract_folder, 'Track.txt'))
        else:
            print("Track.txt does not exist")
